#!/usr/bin/env node
var data = require('../data.js');
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rs6support:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

io.sockets.on('connection',function(socket){
  var ID = (socket.id).toString().substr(0,5);
  socket.json.send({'event':'connected', 'name': ID});
  socket.on('setoper',(idoper,indexplayer,indexslot) => {
    console.log(idoper,indexplayer,indexslot);
   // socket.json.send({'event':'setoper','idoper':idoper,'idslot':idslot});
    data.Players[indexplayer].attackopers[indexslot].id = idoper;
    socket.emit('setoper',{idoper:idoper,indexplayer:indexplayer,indexslot:indexslot});
    socket.broadcast.emit('setoper',{idoper:idoper,indexplayer:indexplayer,indexslot:indexslot});
    
  })
  socket.on('setdefenceoper',(idoper,indexplayer,indexslot) => {
    console.log(idoper,indexplayer,indexslot); 
   // socket.json.send({'event':'setoper','idoper':idoper,'idslot':idslot});
    data.Players[indexplayer].defenceopers[indexslot].id = idoper;
    socket.emit('setdefenceoper',{idoper:idoper,indexplayer:indexplayer,indexslot:indexslot});
    socket.broadcast.emit('setdefenceoper',{idoper:idoper,indexplayer:indexplayer,indexslot:indexslot});
    
  })
  socket.on('setname',(idfield,name) => {
    data.Players[idfield].name = name;
    socket.broadcast.emit('setname',{idfield:idfield,name:name});
  })
})



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
